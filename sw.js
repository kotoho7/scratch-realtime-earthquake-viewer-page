const n="srev 1.6.3.0",c=self.origin+"/scratch-realtime-earthquake-viewer-page";self.addEventListener("install",()=>{console.log("[SW] Installing service worker")});self.addEventListener("fetch",e=>{const o=["/index","/manifest","/hash"];if(!(e.request.url===c+"/"||["/assets/","/images/",...o].some(t=>e.request.url.startsWith(c+t)))){console.debug(`[SW] Not caching ${e.request.url}`);return}e.respondWith(caches.open(n).then(async t=>{const a=async s=>{const r=await fetch(s,{redirect:"follow"});if(r.ok)return t.put(s,r.clone()),r};if(e.request.url===c+"/hash")try{const s=await t.match(e.request),r=await a(e.request);if(s&&r.ok){const u=await s.text(),i=await r.clone().text();u!==i&&(console.log(`[SW] Hash changed: ${u}(old) -> ${i}(new)`),caches.delete(n),console.debug(`[SW] Cleared cache for ${e.request.url}`))}return r}catch(s){console.warn(s),console.debug(`[SW] Fetch failed for ${e.request.url}`)}if(e.request.url===c+"/"||e.request.url===c+"/index.html")try{const s=await a(e.request);return s.ok&&console.debug(`[SW] Returning new response for ${e.request.url}`),s}catch(s){console.warn(s),console.debug(`[SW] Fetch failed for ${e.request.url}`)}const l=await t.match(e.request);if(l)return console.debug(`[SW] Returning cached response for ${e.request.url}`),l;const h=await a(e.request);return console.debug(`[SW] Caching new response for ${e.request.url}`),h}))});self.addEventListener("activate",e=>{console.log("[SW] Activating"),e.waitUntil(caches.keys().then(o=>Promise.all(o.map(t=>{if(t!==n)return console.log(`[SW] Deleting cache ${t}`),caches.delete(t)}))))});
